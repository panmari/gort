[![Build Status](https://travis-ci.com/panmari/gort.svg?branch=master)](https://travis-ci.com/panmari/gort)

# gort 

A **go** **r**ay**t**racer writen for educational purposes. It was developed and tested with go 1.11 with a focus on
performance.

## Features

* [CSG Objects](http://en.wikipedia.org/wiki/Constructive_solid_geometry)
* Triangle meshes through the [.obj format](http://en.wikipedia.org/wiki/Wavefront_OBJ)
* Diffuse, Blinn and reflective materials (incoming support for: refractive)
* Scenes are defined as go structs
* Multithreaded with goroutines
* Pointlight integrator (incoming support for whitted integrator, pathintegrator)
* Progress tracking with preview window, e.g. `--preview_update_interval=2s`

## Examples

![CSG example scene](/output/test_scene_csg.png)

## Profiling

To optimize code, you may want to profile it once in a while. This can be done using the performance test

    go test -bench github.com/panmari/gort/...

To do more in-depth analysis, also dump a profile:

    go test -bench -cpuprofile cpu.out -short github.com/panmari/gort/renderer

The CPU profile can then be analyzed using

    go tool pprof renderer.test cpu.out

And then typing e.g. `web` for getting an overview or the name of a method to see details. Most performance impacting
packages have performance tests of some sort; to run them just replace `renderer/` with the package you want to test. 
