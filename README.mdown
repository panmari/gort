# gort - A ray tracer in go

This is a raytracing framework used for educational purposes. It was developed and tested with go 1.4.

## Features

* [CSG Objects](http://en.wikipedia.org/wiki/Constructive_solid_geometry)
* Triangle meshes through the [.obj format](http://en.wikipedia.org/wiki/Wavefront_OBJ)
* Diffuse materials (incoming support for: glossy, reflective, refractive etc.)
* Scenes are defined as go structs
* Multithreaded with goroutines
* Pointlight integrator (incoming support for whitted integrator, pathintegrator)

## Installation

Install go and dependencies. On a Debian derivative this may be done using the following command

     sudo apt-get install golang golang-go.tools gocode

Configure your GOPATH by inserting the following line into your `.bashrc` file

     export GOPATH={go_workspace}/{local clone of repositry}

Install goclipse by following the instructions on 
https://github.com/GoClipse/goclipse/blob/latest/documentation/Installation.md
Go to window -> preferences -> go and enter the following settings

* GOROOT: `/usr/lib/go`
* GOPATH: As above
* Go tool path (go): `/usr/bin/go`
* Go formatter (gofmt):  `/usr/bin/gofmt`
* Go documentor (godoc): `/usr/bin/godoc`

And additionally in the tab gocode, you need to set the path to your gocode executable, which is
usually `/usr/bin/gocode` if you installed it through the packaging system.

## Profiling

To optimize code, you may want to profile it once in a while. This can be done using the performance test

    go test -bench . -cpuprofile cpu.out renderer/
    
Or the shorter version:

    go test -bench . -cpuprofile cpu.out -short renderer/
    
The CPU profile can then be analyzed using

    go tool pprof renderer.test cpu.out
    
And then typing e.g. `web` for getting an overview or the name of a method to see details. Most performance impacting
packages have performance tests of some sort; to run them just replace `renderer/` with the package you want to test. 
